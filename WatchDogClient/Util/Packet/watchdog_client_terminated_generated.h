// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WATCHDOGCLIENTTERMINATED_WATCHDOGPACKET_H_
#define FLATBUFFERS_GENERATED_WATCHDOGCLIENTTERMINATED_WATCHDOGPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace WatchDogPacket {

struct WatchDogClientTerminated;
struct WatchDogClientTerminatedBuilder;

struct WatchDogClientTerminated FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WatchDogClientTerminatedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HAS_DUMP = 4
  };
  bool has_dump() const {
    return GetField<uint8_t>(VT_HAS_DUMP, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_HAS_DUMP, 1) &&
           verifier.EndTable();
  }
};

struct WatchDogClientTerminatedBuilder {
  typedef WatchDogClientTerminated Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_has_dump(bool has_dump) {
    fbb_.AddElement<uint8_t>(WatchDogClientTerminated::VT_HAS_DUMP, static_cast<uint8_t>(has_dump), 0);
  }
  explicit WatchDogClientTerminatedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WatchDogClientTerminated> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WatchDogClientTerminated>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WatchDogClientTerminated> CreateWatchDogClientTerminated(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool has_dump = false) {
  WatchDogClientTerminatedBuilder builder_(_fbb);
  builder_.add_has_dump(has_dump);
  return builder_.Finish();
}

inline const WatchDogPacket::WatchDogClientTerminated *GetWatchDogClientTerminated(const void *buf) {
  return ::flatbuffers::GetRoot<WatchDogPacket::WatchDogClientTerminated>(buf);
}

inline const WatchDogPacket::WatchDogClientTerminated *GetSizePrefixedWatchDogClientTerminated(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<WatchDogPacket::WatchDogClientTerminated>(buf);
}

inline bool VerifyWatchDogClientTerminatedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WatchDogPacket::WatchDogClientTerminated>(nullptr);
}

inline bool VerifySizePrefixedWatchDogClientTerminatedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WatchDogPacket::WatchDogClientTerminated>(nullptr);
}

inline void FinishWatchDogClientTerminatedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<WatchDogPacket::WatchDogClientTerminated> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWatchDogClientTerminatedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<WatchDogPacket::WatchDogClientTerminated> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace WatchDogPacket

#endif  // FLATBUFFERS_GENERATED_WATCHDOGCLIENTTERMINATED_WATCHDOGPACKET_H_
