// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WATCHDOGDATADEFINE_WATCHDOGPACKET_H_
#define FLATBUFFERS_GENERATED_WATCHDOGDATADEFINE_WATCHDOGPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace WatchDogPacket {

struct WatchDogClientInformation;
struct WatchDogClientInformationBuilder;

enum PacketType : int8_t {
  PacketType_None = 0,
  PacketType_NewProcessDetected = 1,
  PacketType_ProcessTerminated = 2,
  PacketType_DumpFile = 3,
  PacketType_Ping = 4,
  PacketType_MIN = PacketType_None,
  PacketType_MAX = PacketType_Ping
};

inline const PacketType (&EnumValuesPacketType())[5] {
  static const PacketType values[] = {
    PacketType_None,
    PacketType_NewProcessDetected,
    PacketType_ProcessTerminated,
    PacketType_DumpFile,
    PacketType_Ping
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[6] = {
    "None",
    "NewProcessDetected",
    "ProcessTerminated",
    "DumpFile",
    "Ping",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (::flatbuffers::IsOutRange(e, PacketType_None, PacketType_Ping)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketType()[index];
}

enum RequestMessageType : int8_t {
  RequestMessageType_None = 0,
  RequestMessageType_Succeeded = 1,
  RequestMessageType_Failed = 2,
  RequestMessageType_MIN = RequestMessageType_None,
  RequestMessageType_MAX = RequestMessageType_Failed
};

inline const RequestMessageType (&EnumValuesRequestMessageType())[3] {
  static const RequestMessageType values[] = {
    RequestMessageType_None,
    RequestMessageType_Succeeded,
    RequestMessageType_Failed
  };
  return values;
}

inline const char * const *EnumNamesRequestMessageType() {
  static const char * const names[4] = {
    "None",
    "Succeeded",
    "Failed",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestMessageType(RequestMessageType e) {
  if (::flatbuffers::IsOutRange(e, RequestMessageType_None, RequestMessageType_Failed)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequestMessageType()[index];
}

struct WatchDogClientInformation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WatchDogClientInformationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROGRAM_NAME = 4,
    VT_ENABLE_DISCORD_BOT = 6,
    VT_DISCORD_BOT_CHANNE_ID = 8
  };
  const ::flatbuffers::String *program_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROGRAM_NAME);
  }
  bool enable_discord_bot() const {
    return GetField<uint8_t>(VT_ENABLE_DISCORD_BOT, 0) != 0;
  }
  uint64_t discord_bot_channe_id() const {
    return GetField<uint64_t>(VT_DISCORD_BOT_CHANNE_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROGRAM_NAME) &&
           verifier.VerifyString(program_name()) &&
           VerifyField<uint8_t>(verifier, VT_ENABLE_DISCORD_BOT, 1) &&
           VerifyField<uint64_t>(verifier, VT_DISCORD_BOT_CHANNE_ID, 8) &&
           verifier.EndTable();
  }
};

struct WatchDogClientInformationBuilder {
  typedef WatchDogClientInformation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_program_name(::flatbuffers::Offset<::flatbuffers::String> program_name) {
    fbb_.AddOffset(WatchDogClientInformation::VT_PROGRAM_NAME, program_name);
  }
  void add_enable_discord_bot(bool enable_discord_bot) {
    fbb_.AddElement<uint8_t>(WatchDogClientInformation::VT_ENABLE_DISCORD_BOT, static_cast<uint8_t>(enable_discord_bot), 0);
  }
  void add_discord_bot_channe_id(uint64_t discord_bot_channe_id) {
    fbb_.AddElement<uint64_t>(WatchDogClientInformation::VT_DISCORD_BOT_CHANNE_ID, discord_bot_channe_id, 0);
  }
  explicit WatchDogClientInformationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WatchDogClientInformation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WatchDogClientInformation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WatchDogClientInformation> CreateWatchDogClientInformation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> program_name = 0,
    bool enable_discord_bot = false,
    uint64_t discord_bot_channe_id = 0) {
  WatchDogClientInformationBuilder builder_(_fbb);
  builder_.add_discord_bot_channe_id(discord_bot_channe_id);
  builder_.add_program_name(program_name);
  builder_.add_enable_discord_bot(enable_discord_bot);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<WatchDogClientInformation> CreateWatchDogClientInformationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *program_name = nullptr,
    bool enable_discord_bot = false,
    uint64_t discord_bot_channe_id = 0) {
  auto program_name__ = program_name ? _fbb.CreateString(program_name) : 0;
  return WatchDogPacket::CreateWatchDogClientInformation(
      _fbb,
      program_name__,
      enable_discord_bot,
      discord_bot_channe_id);
}

inline const WatchDogPacket::WatchDogClientInformation *GetWatchDogClientInformation(const void *buf) {
  return ::flatbuffers::GetRoot<WatchDogPacket::WatchDogClientInformation>(buf);
}

inline const WatchDogPacket::WatchDogClientInformation *GetSizePrefixedWatchDogClientInformation(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<WatchDogPacket::WatchDogClientInformation>(buf);
}

inline bool VerifyWatchDogClientInformationBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WatchDogPacket::WatchDogClientInformation>(nullptr);
}

inline bool VerifySizePrefixedWatchDogClientInformationBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WatchDogPacket::WatchDogClientInformation>(nullptr);
}

inline void FinishWatchDogClientInformationBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<WatchDogPacket::WatchDogClientInformation> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWatchDogClientInformationBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<WatchDogPacket::WatchDogClientInformation> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace WatchDogPacket

#endif  // FLATBUFFERS_GENERATED_WATCHDOGDATADEFINE_WATCHDOGPACKET_H_
