// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WATCHDOGDUMPTRANSMIT_WATCHDOGPACKET_H_
#define FLATBUFFERS_GENERATED_WATCHDOGDUMPTRANSMIT_WATCHDOGPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace WatchDogPacket {

struct DumpTransmitPacket;
struct DumpTransmitPacketBuilder;

enum DumpTransmitStatus : int8_t {
  DumpTransmitStatus_None = 0,
  DumpTransmitStatus_Start = 1,
  DumpTransmitStatus_Loop = 2,
  DumpTransmitStatus_End = 3,
  DumpTransmitStatus_MIN = DumpTransmitStatus_None,
  DumpTransmitStatus_MAX = DumpTransmitStatus_End
};

inline const DumpTransmitStatus (&EnumValuesDumpTransmitStatus())[4] {
  static const DumpTransmitStatus values[] = {
    DumpTransmitStatus_None,
    DumpTransmitStatus_Start,
    DumpTransmitStatus_Loop,
    DumpTransmitStatus_End
  };
  return values;
}

inline const char * const *EnumNamesDumpTransmitStatus() {
  static const char * const names[5] = {
    "None",
    "Start",
    "Loop",
    "End",
    nullptr
  };
  return names;
}

inline const char *EnumNameDumpTransmitStatus(DumpTransmitStatus e) {
  if (::flatbuffers::IsOutRange(e, DumpTransmitStatus_None, DumpTransmitStatus_End)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDumpTransmitStatus()[index];
}

struct DumpTransmitPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DumpTransmitPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DUMP_TRANSFER_STATUS = 4,
    VT_PROGRAM_NAME = 6,
    VT_DUMP_FILE_NAME = 8,
    VT_DUMP_DATA = 10
  };
  int8_t dump_transfer_status() const {
    return GetField<int8_t>(VT_DUMP_TRANSFER_STATUS, 0);
  }
  const ::flatbuffers::String *program_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROGRAM_NAME);
  }
  const ::flatbuffers::String *dump_file_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DUMP_FILE_NAME);
  }
  const ::flatbuffers::Vector<uint8_t> *dump_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DUMP_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_DUMP_TRANSFER_STATUS, 1) &&
           VerifyOffset(verifier, VT_PROGRAM_NAME) &&
           verifier.VerifyString(program_name()) &&
           VerifyOffset(verifier, VT_DUMP_FILE_NAME) &&
           verifier.VerifyString(dump_file_name()) &&
           VerifyOffset(verifier, VT_DUMP_DATA) &&
           verifier.VerifyVector(dump_data()) &&
           verifier.EndTable();
  }
};

struct DumpTransmitPacketBuilder {
  typedef DumpTransmitPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_dump_transfer_status(int8_t dump_transfer_status) {
    fbb_.AddElement<int8_t>(DumpTransmitPacket::VT_DUMP_TRANSFER_STATUS, dump_transfer_status, 0);
  }
  void add_program_name(::flatbuffers::Offset<::flatbuffers::String> program_name) {
    fbb_.AddOffset(DumpTransmitPacket::VT_PROGRAM_NAME, program_name);
  }
  void add_dump_file_name(::flatbuffers::Offset<::flatbuffers::String> dump_file_name) {
    fbb_.AddOffset(DumpTransmitPacket::VT_DUMP_FILE_NAME, dump_file_name);
  }
  void add_dump_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> dump_data) {
    fbb_.AddOffset(DumpTransmitPacket::VT_DUMP_DATA, dump_data);
  }
  explicit DumpTransmitPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DumpTransmitPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DumpTransmitPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DumpTransmitPacket> CreateDumpTransmitPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int8_t dump_transfer_status = 0,
    ::flatbuffers::Offset<::flatbuffers::String> program_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dump_file_name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> dump_data = 0) {
  DumpTransmitPacketBuilder builder_(_fbb);
  builder_.add_dump_data(dump_data);
  builder_.add_dump_file_name(dump_file_name);
  builder_.add_program_name(program_name);
  builder_.add_dump_transfer_status(dump_transfer_status);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DumpTransmitPacket> CreateDumpTransmitPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int8_t dump_transfer_status = 0,
    const char *program_name = nullptr,
    const char *dump_file_name = nullptr,
    const std::vector<uint8_t> *dump_data = nullptr) {
  auto program_name__ = program_name ? _fbb.CreateString(program_name) : 0;
  auto dump_file_name__ = dump_file_name ? _fbb.CreateString(dump_file_name) : 0;
  auto dump_data__ = dump_data ? _fbb.CreateVector<uint8_t>(*dump_data) : 0;
  return WatchDogPacket::CreateDumpTransmitPacket(
      _fbb,
      dump_transfer_status,
      program_name__,
      dump_file_name__,
      dump_data__);
}

inline const WatchDogPacket::DumpTransmitPacket *GetDumpTransmitPacket(const void *buf) {
  return ::flatbuffers::GetRoot<WatchDogPacket::DumpTransmitPacket>(buf);
}

inline const WatchDogPacket::DumpTransmitPacket *GetSizePrefixedDumpTransmitPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<WatchDogPacket::DumpTransmitPacket>(buf);
}

inline bool VerifyDumpTransmitPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WatchDogPacket::DumpTransmitPacket>(nullptr);
}

inline bool VerifySizePrefixedDumpTransmitPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WatchDogPacket::DumpTransmitPacket>(nullptr);
}

inline void FinishDumpTransmitPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<WatchDogPacket::DumpTransmitPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDumpTransmitPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<WatchDogPacket::DumpTransmitPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace WatchDogPacket

#endif  // FLATBUFFERS_GENERATED_WATCHDOGDUMPTRANSMIT_WATCHDOGPACKET_H_
