// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WATCHDOGCLIENTENDREQUEST_WATCHDOGPACKET_H_
#define FLATBUFFERS_GENERATED_WATCHDOGCLIENTENDREQUEST_WATCHDOGPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace WatchDogPacket {

struct WatchDogClientEndRequest;
struct WatchDogClientEndRequestBuilder;

struct WatchDogClientEndRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WatchDogClientEndRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENABLE_RESTART = 4
  };
  bool enable_restart() const {
    return GetField<uint8_t>(VT_ENABLE_RESTART, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ENABLE_RESTART, 1) &&
           verifier.EndTable();
  }
};

struct WatchDogClientEndRequestBuilder {
  typedef WatchDogClientEndRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_enable_restart(bool enable_restart) {
    fbb_.AddElement<uint8_t>(WatchDogClientEndRequest::VT_ENABLE_RESTART, static_cast<uint8_t>(enable_restart), 0);
  }
  explicit WatchDogClientEndRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WatchDogClientEndRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WatchDogClientEndRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WatchDogClientEndRequest> CreateWatchDogClientEndRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool enable_restart = false) {
  WatchDogClientEndRequestBuilder builder_(_fbb);
  builder_.add_enable_restart(enable_restart);
  return builder_.Finish();
}

inline const WatchDogPacket::WatchDogClientEndRequest *GetWatchDogClientEndRequest(const void *buf) {
  return ::flatbuffers::GetRoot<WatchDogPacket::WatchDogClientEndRequest>(buf);
}

inline const WatchDogPacket::WatchDogClientEndRequest *GetSizePrefixedWatchDogClientEndRequest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<WatchDogPacket::WatchDogClientEndRequest>(buf);
}

inline bool VerifyWatchDogClientEndRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WatchDogPacket::WatchDogClientEndRequest>(nullptr);
}

inline bool VerifySizePrefixedWatchDogClientEndRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WatchDogPacket::WatchDogClientEndRequest>(nullptr);
}

inline void FinishWatchDogClientEndRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<WatchDogPacket::WatchDogClientEndRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWatchDogClientEndRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<WatchDogPacket::WatchDogClientEndRequest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace WatchDogPacket

#endif  // FLATBUFFERS_GENERATED_WATCHDOGCLIENTENDREQUEST_WATCHDOGPACKET_H_
